tempF=load('tD_generalfastextbal2lambda+.mat');
extForces=tempF.tF_general;
names2use=fieldnames(tempF.tF_general);


for i=1:length(names2use)
     
    fprintf('Filtering %s \n',names2use{i});
[filteredFtData.(names2use{i}),mask]=filterFtData(extForces.(names2use{i}).externalForces);

    extFf.(names2use{i})=applyMask(extForces.(names2use{i}),mask);
    filteredFtData.(names2use{i})=applyMask(filteredFtData.(names2use{i}),mask);
    extFf.(names2use{i}).filtered= filteredFtData.(names2use{i});
 end

%re frame the time if desired
timeFrame=[0,290];

mask=extFf.(names2use{i}).eForcesTime>extFf.(names2use{i}).eForcesTime(1)+timeFrame(1) & extFf.(names2use{i}).eForcesTime<extFf.(names2use{i}).eForcesTime(1)+timeFrame(2);
extF=applyMask(extFf,mask);
for frN=1:length(framesToAnalize)

    for i=1:length(names2use)
        error2.(framesToAnalize{frN})(toCompare-1,i)=norm(mean(abs(extF.(names2use{i}).filtered.(framesToAnalize{frN})(:,1:3))));
        error2Xaxis.(framesToAnalize{frN})(toCompare-1,i,:)=mean(abs(extF.(names2use{i}).filtered.(framesToAnalize{frN})));
    end
    
    [minErrall,minIndall]=min(error2.(framesToAnalize{frN}));
     fprintf('The calibration matrix with least error2 among all datasets is from %s , with a total of %d percentage on average \n',names2use{minIndall}, minErrall);
 sCalibMat.(sensorsToAnalize{frN})=cMat.(names2use{minIndall}).(sensorsToAnalize{frN})/(cMat.Workbench.(sensorsToAnalize{frN}));%calculate secondary calibration matrix 
 %xmlStr=cMat2xml(sCalibMat.(sensorsToAnalize{frN}),sensorName);% print in required format to use by WholeBodyDynamics
 bestCMat.(sensorsToAnalize{frN})=cMat.(names2use{minIndall}).(sensorsToAnalize{frN});
 bestName.(sensorsToAnalize{frN})=names2use{minIndall};
  xmlStr=cMat2xml(sCalibMat.(sensorsToAnalize{frN}),sensorName);% print in required format to use by WholeBodyDynamics
 
    axisName={'fx','fy','fz','tx','ty','tz'};
 for axis=1:6
      totalerror2Xaxis=error2Xaxis.(framesToAnalize{frN})(:,:,axis);
      
     [minErr,minInd]=min(totalerror2Xaxis);
     fprintf('The calibration matrix with least error2 on %s among all datasets is from %s , with a total of %d percentage on average \n',axisName{axis},names2use{minInd}, minErr);
     frankieMatrix2.(framesToAnalize{frN})(axis,:)=cMat.(names2use{minInd}).(sensorsToAnalize{frN})(axis,:);
     frankieData2.(framesToAnalize{frN})(:,axis)=extF.(names2use{minInd}).filtered.(framesToAnalize{frN})(:,axis);
 end
    
 %plot the best ones
   
                      figure,plot3_matrix( extF.(names2use{1}).filtered.(framesToAnalize{frN})(:,1:3));hold on;
                        plot3_matrix( extF.(names2use{minIndall}).filtered.(framesToAnalize{frN})(:,1:3));hold on;
                        plot3_matrix( frankieData2.(framesToAnalize{frN})(:,1:3));hold on;
                        legend({'workbench';'best';'frankie'},'Location','west');
                        title(strcat('Wrench space on ',toCompareWith,' frame ', escapeUnderscores(framesToAnalize{frN})));
                        xlabel('F_{x}');
                        ylabel('F_{y}');
                        zlabel('F_{z}');
                          grid on;
                    
          
       FTplotsWithOption(struct(strcat(framesToAnalize{frN},'_',names2use{1}),extF.(names2use{1}).filtered.(framesToAnalize{frN}),strcat('best','_',names2use{minIndall}), extF.(names2use{minIndall}).filtered.(framesToAnalize{frN})),extF.(names2use{1}).eForcesTime,true);
 FTplotsWithOption(struct(strcat(framesToAnalize{frN},'_',names2use{1}),extF.(names2use{1}).filtered.(framesToAnalize{frN}),strcat('frankie'), frankieData2.(framesToAnalize{frN})),extF.(names2use{1}).eForcesTime,true);
  FTplotsWithOption(struct(strcat(framesToAnalize{frN},'_',names2use{minIndall}),extF.(names2use{minIndall}).filtered.(framesToAnalize{frN}),strcat('frankie'), frankieData2.(framesToAnalize{frN})),extF.(names2use{1}).eForcesTime,true);

  fCalibMat=frankieMatrix2.(framesToAnalize{frN})/(cMat.Workbench.(sensorsToAnalize{frN}));%calculate secondary calibration matrix 
 xmlStrf=cMat2xml(fCalibMat,sensorName);% print in required format to use by WholeBodyDynamics
 
end
